Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 13:59:19
WeeklyAssign4.asm					     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Calling convention:
				; SUITABLE FOR CALLING: ebx, ecx, esi
				; OFTEN CLOBBERED: eax, edi, edx (ReadInt, and WriteString, div op)
				; Functions that take x and y as arguments:
				    ; Make sure to push x and y to the stack before calling them
				    ; x = ebx, y = ecx
				    ; Make sure to pop x and y back out

				; Configurable constants
				    ; MAP_WIDTH and height of the map
 = 00000010			    MAP_WIDTH = 16
 = 00000010			    MAP_HEIGHT = 16
 = 0000000A			    PERCENT_MINES = 10

				; Internal constants
				    ; Field map codes
 = 00000000			    FIELD_CLEAR = 0
 = 00000009			    FIELD_MINE = 9

				    ; Interactive map codes
 = 00000000			    INTER_UNDISCOVERED = 0
 = 00000001			    INTER_DISCOVERED = 1
 = 00000002			    INTER_FLAGGED = 2

				    ; Display characters
 = 0000002D			    UNDISCOVERED_CHAR = '-'
 = 00000046			    FLAG_CHAR = 'F'
 = 00000020			    CLEAR_CHAR = ' '
 = 0000002A			    MINE_CHAR = '*'

				    ; Kernel lengths
 = 00000008			    FULL_AREA_KERNEL_LEN = 8
 = 00000004			    ADJACENT_KERNEL_LEN = 4
 00000000			.data
				; Internal variables
 00000000 0000000F		    rng dd 15
 00000004 FFFFFFFF		    full_area_kernel_x dd -1, 0, 1, -1, 1, -1, 0, 1
	   00000000
	   00000001
	   FFFFFFFF
	   00000001
	   FFFFFFFF
	   00000000
	   00000001
 00000024 FFFFFFFF		    full_area_kernel_y dd -1, -1, -1, 0, 0, 1, 1, 1
	   FFFFFFFF
	   FFFFFFFF
	   00000000
	   00000000
	   00000001
	   00000001
	   00000001
 00000044 FFFFFFFF		    adjacent_kernel_x dd -1, 0, 0, 1
	   00000000
	   00000000
	   00000001
 00000054 00000000		    adjacent_kernel_y dd 0, -1, 1, 0
	   FFFFFFFF
	   00000001
	   00000000
 00000064  00000100 [		    field BYTE (MAP_WIDTH * MAP_HEIGHT) DUP(0)
	    00
	   ]
 00000164  00000100 [		    interactive BYTE (MAP_WIDTH * MAP_HEIGHT) DUP(0)
	    00
	   ]

 00000000			.code
 00000000			main PROC

 00000000  E8 0000008C		call generate_map
 00000005  E8 00000143		call print_map


				; Clobbers: eax, edi, edx
				; Operation: rng += 1103515245 * rng
				; Notes:
				;   eax is set to the value of RNG.
				; https://stackoverflow.com/questions/3062746/special-simple-random-number-generator#3062783
 0000000A			advance_rng:
 0000000A  BF 41C64E6D		    mov edi, 1103515245
 0000000F  A1 00000000 R	    mov eax, [rng]
 00000014  F7 E7		    mul edi
 00000016  05 00003039		    add eax, 12345
 0000001B  A3 00000000 R	    mov [rng], eax
 00000020  C3			    ret

				; x = ebx, y = ecx
				; Set EFLAGS so that jl jumps any of the following are unsatisfied
				;   x >= 0 && y >= 0 && MAP_WIDTH - 1 >= x && MAP_HEIGHT - 1 >= y;
				; Clobbers: eax
 00000021			bounds_check:
 00000021  83 FB 00		    cmp ebx, 0
 00000024  7C 15		    jl bounds_check_break  
 00000026  83 F9 00		    cmp ecx, 0
 00000029  7C 10		    jl bounds_check_break  
 0000002B  B8 0000000F		    mov eax, MAP_WIDTH - 1
 00000030  3B C3		    cmp eax, ebx
 00000032  7C 07		    jl bounds_check_break  
 00000034  B8 0000000F		    mov eax, MAP_HEIGHT - 1
 00000039  3B C1		    cmp eax, ecx
 0000003B			    bounds_check_break:
 0000003B  C3			    ret

				; Clobbers: eax, edi
 0000003C			place_mine_at_xy:
				    ; eax = (ecx * MAP_WIDTH) + ebx
 0000003C  B8 00000010		    mov eax, MAP_WIDTH
 00000041  F7 E1		    mul ecx
 00000043  03 C3		    add eax, ebx

				    ; field[eax] = FIELD_MINE
 00000045  B2 09		    mov dl, FIELD_MINE
 00000047  88 90 00000064 R	    mov [field + eax], dl

 0000004D  BF 00000000		    mov edi, 0 ; Loop counter for full_area_kernel_{x, y}
 00000052			    pm_area_loop:
				        ; We're about to clobber these two, save 'em
 00000052  53			        push ebx
 00000053  51			        push ecx

				        ; ebx += full_area_kernel_x[edi]
 00000054  03 1C BD		        add ebx, [full_area_kernel_x + edi*4]
	   00000004 R

				        ; ecx += full_area_kernel_y[edi]
 0000005B  03 0C BD		        add ecx, [full_area_kernel_y + edi*4]
	   00000024 R

				        ; if (!bounds_check(ebx, ecx)) continue 
 00000062  E8 FFFFFFBA		        call bounds_check
 00000067  7C 1D		        jl pm_area_loop_continue

				        ; eax = ecx * MAP_WIDTH + ebx
 00000069  B8 00000010		        mov eax, MAP_WIDTH
 0000006E  F7 E1		        mul ecx
 00000070  03 C3		        add eax, ebx

				        ; dl = field[eax]
 00000072  8A 90 00000064 R	        mov dl, [field + eax]

				        ; if (dl == FIELD_MINE) continue
 00000078  80 FA 09		        cmp dl, FIELD_MINE
 0000007B  74 09		        je pm_area_loop_continue

				        ; dl += 1
 0000007D  80 C2 01		        add dl, 1

				        ; field[eax] = dl
 00000080  88 90 00000064 R	        mov [field + eax], dl

 00000086			        pm_area_loop_continue:
 00000086  59			        pop ecx
 00000087  5B			        pop ebx

 00000088  83 C7 01		     add edi, 1
 0000008B  83 FF 08		     cmp edi, FULL_AREA_KERNEL_LEN
 0000008E  7C C2		     jl pm_area_loop

 00000090  C3			    ret


				; Generates a new map
 00000091			generate_map:
 00000091  E8 00000000 E	    call Randomize
				    ; Clear both of the arrays 
 00000096  B9 00000100		    mov ecx, MAP_WIDTH * MAP_HEIGHT
 0000009B			    gm_clear_loop:
 0000009B  C6 81 00000064 R	        mov [field + ecx], FIELD_CLEAR
	   00
 000000A2  C6 81 00000164 R	        mov [interactive + ecx], INTER_DISCOVERED
	   01
 000000A9  E2 F0		        loop gm_clear_loop
				    
				    
				    ; Loop through all coordinates, populating it with mines
 000000AB  B9 00000000		    mov ecx, 0 ; Y coord
 000000B0			    gm_y_loop:

 000000B0  BB 00000000		        mov ebx, 0 ; X coord
 000000B5			        gm_x_loop:
 000000B5  B8 00000064		            mov eax, 100
 000000BA  E8 00000000 E	            call RandomRange

				            ; if (edx >= PERCENT_MINES) jmp gm_clear
 000000BF  BE 0000000A		            mov esi, PERCENT_MINES
 000000C4  3B C6		            cmp eax, esi
 000000C6  7D 09		            jge gm_clear

				            ; else, place a mine at (ebx, ecx)
				            ; TODO: Comment out these push/pop, they're not needed!
 000000C8  53			            push ebx
 000000C9  51			            push ecx
 000000CA  E8 FFFFFF6D		            call place_mine_at_xy
 000000CF  59			            pop ecx
 000000D0  5B			            pop ebx
				            
 000000D1			            gm_clear:

				        ; if (++x > MAP_WIDTH) break;
 000000D1  83 C3 01		        add ebx, 1
 000000D4  83 FB 10		        cmp ebx, MAP_WIDTH
 000000D7  7C DC		        jl gm_x_loop

				    ; if (++y > MAP_HEIGHT) break;
 000000D9  83 C1 01		    add ecx, 1
 000000DC  83 F9 10		    cmp ecx, MAP_HEIGHT
 000000DF  7C CF		    jl gm_y_loop
 000000E1  C3			    ret

 000000E2			seed_and_grow_clear:
				    ; Save last position into the stack
 000000E2  BF 00000000		    mov edi, 0
 000000E7			    seed_and_grow_adj_loop:
 000000E7  53			        push ebx
 000000E8  51			        push ecx
 000000E9  57			        push edi

				        ; x, y += kernel[i]
 000000EA  03 1C BD		        add ebx, [adjacent_kernel_x + edi*4]
	   00000044 R
 000000F1  03 0C BD		        add ecx, [adjacent_kernel_y + edi*4]
	   00000054 R

				        ; Bounds check
 000000F8  E8 FFFFFF24		        call bounds_check
 000000FD  7C 2E		        jl seed_and_grow_continue

				        ; position (eax) = y * WIDTH + x
 000000FF  B8 00000010		        mov eax, MAP_WIDTH
 00000104  F7 E1		        mul ecx
 00000106  03 C3		        add eax, ebx

				        ; If the area is not undiscovered (is discovered/flagged), don't discover it
 00000108  80 B8 00000164 R	        cmp [interactive + eax], INTER_UNDISCOVERED
	   00
 0000010F  75 1C		        jne seed_and_grow_continue

				        ; If the area is a mine, continue loop
 00000111  8A 90 00000064 R	        mov dl, [field + eax]
 00000117  80 FA 09		        cmp dl, FIELD_MINE
 0000011A  74 11		        je seed_and_grow_continue

				        ; "Discover" current location
 0000011C  C6 80 00000164 R	        mov [interactive + eax], INTER_DISCOVERED
	   01

				        ; If the area is not clear, don't seed-and-grow here
 00000123  80 FA 00		        cmp dl, FIELD_CLEAR
 00000126  75 05		        jne seed_and_grow_continue

 00000128  E8 FFFFFFB5		        call seed_and_grow_clear
				        
 0000012D			        seed_and_grow_continue:

 0000012D  5F			        pop edi
 0000012E  59			        pop ecx
 0000012F  5B			        pop ebx

 00000130  83 C7 01		    add edi, 1
 00000133  83 FF 04		    cmp edi, ADJACENT_KERNEL_LEN
 00000136  7C AF		    jl seed_and_grow_adj_loop

 00000138  C3			    ret

 00000139			write_short_hex:
 00000139  83 F8 0A		    cmp eax, 10
 0000013C  7C 09		    jl write_short_hex_int

 0000013E  83 C0 37		    add eax, 'A' - 10
 00000141  E8 00000000 E	    call WriteChar
 00000146  C3			    ret

 00000147			    write_short_hex_int:
 00000147  E8 00000000 E	    call WriteDec
 0000014C  C3			    ret

				; Prints the current map
 0000014D			print_map:
 0000014D  B9 00000000		    mov ecx, 0
 00000152  B8 0000002D		    mov eax, '-'
 00000157  E8 00000000 E	    call WriteChar
 0000015C  B8 00000020		    mov eax, ' '
 00000161  E8 00000000 E	    call WriteChar
 00000166  E8 00000000 E	    call WriteChar
 0000016B			    write_x_coords:
 0000016B  8B C1		        mov eax, ecx
 0000016D  E8 FFFFFFC7		        call write_short_hex
 00000172  B8 00000020		        mov eax, ' '
 00000177  E8 00000000 E	        call WriteChar
 0000017C  41			        inc ecx
 0000017D  83 F9 10		        cmp ecx, MAP_WIDTH
 00000180  7C E9		        jl write_x_coords
 00000182  E8 00000000 E	    call CrLf
 00000187  E8 00000000 E	    call CrLf

 0000018C  B9 00000000		    mov ecx, 0 ; Y coord
 00000191			    print_y_loop:
				        ; write numbers along the side
 00000191  8B C1		        mov eax, ecx
 00000193  E8 FFFFFFA1		        call write_short_hex
 00000198  B8 00000020		        mov eax, ' '
 0000019D  E8 00000000 E	        call WriteChar
 000001A2  E8 00000000 E	        call WriteChar

 000001A7  BB 00000000		        mov ebx, 0 ; X coord
 000001AC			        print_x_loop:
				            ; eax = (ecx * MAP_WIDTH) + ebx
 000001AC  BF 00000010		            mov edi, MAP_WIDTH
 000001B1  0F AF F9		            imul edi, ecx
 000001B4  03 FB		            add edi, ebx

				            ; check interactive map for 0 or 2
 000001B6  8A 87 00000164 R	            mov al, [interactive + edi]
 000001BC  3C 00		            cmp al, INTER_UNDISCOVERED
 000001BE  74 20		            je print_dash
 000001C0  3C 02		            cmp al, INTER_FLAGGED
 000001C2  74 23		            je F_in_the_chat

				            ; case where its not 0 or 2
 000001C4  8A 87 00000064 R	            mov al, [field + edi]
 000001CA  3C 09		            cmp al, FIELD_MINE
 000001CC  74 20		            je print_asterisk
 000001CE  3C 00		            cmp al, FIELD_CLEAR
 000001D0  74 07		            je print_space
 000001D2  04 30		            add al, '0'
 000001D4  E8 0000001C		            call im_done

 000001D9			            print_space:
 000001D9  B8 00000020		            mov eax, CLEAR_CHAR
 000001DE  EB 15		            jmp im_done

 000001E0			            print_dash:
 000001E0  B8 0000002D		            mov eax, UNDISCOVERED_CHAR
 000001E5  EB 0E		            jmp im_done

 000001E7			            F_in_the_chat:
 000001E7  B8 00000046		            mov eax, FLAG_CHAR
 000001EC  EB 07		            jmp im_done

 000001EE			            print_asterisk:
 000001EE  B8 0000002A		            mov eax, MINE_CHAR
 000001F3  EB 00		            jmp im_done

 000001F5			            im_done:
 000001F5  E8 00000000 E	            call WriteChar
 000001FA  B8 00000020		            mov eax, ' '
 000001FF  E8 00000000 E	            call WriteChar


				        ; if (++x > MAP_WIDTH) break;
 00000204  83 C3 01		        add ebx, 1
 00000207  83 FB 10		        cmp ebx, MAP_WIDTH
 0000020A  7C A0		        jl print_x_loop

				    ; Write a newline
 0000020C  E8 00000000 E	    call Crlf

				    ; if (++y > MAP_HEIGHT) break;
 00000211  83 C1 01		    add ecx, 1
 00000214  83 F9 10		    cmp ecx, MAP_HEIGHT
 00000217  0F 8C FFFFFF74	    jl print_y_loop

 0000021D  C3			    ret

				  


				exit
 0000021E  6A 00	   *	    push   +000000000h
 00000220  E8 00000000 E   *	    call   ExitProcess

 00000225			main ENDP

				END main


Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 13:59:19
WeeklyAssign4.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000264 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000225 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000225 Public STDCALL
  advance_rng  . . . . . . . . .	L Near	 0000000A _TEXT	
  bounds_check . . . . . . . . .	L Near	 00000021 _TEXT	
  bounds_check_break . . . . . .	L Near	 0000003B _TEXT	
  place_mine_at_xy . . . . . . .	L Near	 0000003C _TEXT	
  pm_area_loop . . . . . . . . .	L Near	 00000052 _TEXT	
  pm_area_loop_continue  . . . .	L Near	 00000086 _TEXT	
  generate_map . . . . . . . . .	L Near	 00000091 _TEXT	
  gm_clear_loop  . . . . . . . .	L Near	 0000009B _TEXT	
  gm_y_loop  . . . . . . . . . .	L Near	 000000B0 _TEXT	
  gm_x_loop  . . . . . . . . . .	L Near	 000000B5 _TEXT	
  gm_clear . . . . . . . . . . .	L Near	 000000D1 _TEXT	
  seed_and_grow_clear  . . . . .	L Near	 000000E2 _TEXT	
  seed_and_grow_adj_loop . . . .	L Near	 000000E7 _TEXT	
  seed_and_grow_continue . . . .	L Near	 0000012D _TEXT	
  write_short_hex  . . . . . . .	L Near	 00000139 _TEXT	
  write_short_hex_int  . . . . .	L Near	 00000147 _TEXT	
  print_map  . . . . . . . . . .	L Near	 0000014D _TEXT	
  write_x_coords . . . . . . . .	L Near	 0000016B _TEXT	
  print_y_loop . . . . . . . . .	L Near	 00000191 _TEXT	
  print_x_loop . . . . . . . . .	L Near	 000001AC _TEXT	
  print_space  . . . . . . . . .	L Near	 000001D9 _TEXT	
  print_dash . . . . . . . . . .	L Near	 000001E0 _TEXT	
  F_in_the_chat  . . . . . . . .	L Near	 000001E7 _TEXT	
  print_asterisk . . . . . . . .	L Near	 000001EE _TEXT	
  im_done  . . . . . . . . . . .	L Near	 000001F5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ADJACENT_KERNEL_LEN  . . . . . .	Number	 00000004h   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CLEAR_CHAR . . . . . . . . . . .	Number	 00000020h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FIELD_CLEAR  . . . . . . . . . .	Number	 00000000h   
FIELD_MINE . . . . . . . . . . .	Number	 00000009h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FLAG_CHAR  . . . . . . . . . . .	Number	 00000046h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FULL_AREA_KERNEL_LEN . . . . . .	Number	 00000008h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INTER_DISCOVERED . . . . . . . .	Number	 00000001h   
INTER_FLAGGED  . . . . . . . . .	Number	 00000002h   
INTER_UNDISCOVERED . . . . . . .	Number	 00000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAP_HEIGHT . . . . . . . . . . .	Number	 00000010h   
MAP_WIDTH  . . . . . . . . . . .	Number	 00000010h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINE_CHAR  . . . . . . . . . . .	Number	 0000002Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PERCENT_MINES  . . . . . . . . .	Number	 0000000Ah   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UNDISCOVERED_CHAR  . . . . . . .	Number	 0000002Dh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
adjacent_kernel_x  . . . . . . .	DWord	 00000044 _DATA	
adjacent_kernel_y  . . . . . . .	DWord	 00000054 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
field  . . . . . . . . . . . . .	Byte	 00000064 _DATA	
full_area_kernel_x . . . . . . .	DWord	 00000004 _DATA	
full_area_kernel_y . . . . . . .	DWord	 00000024 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
interactive  . . . . . . . . . .	Byte	 00000164 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
rng  . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
