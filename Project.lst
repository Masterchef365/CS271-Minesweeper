Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 16:02:23
WeeklyAssign4.asm					     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Calling convention:
				; SUITABLE FOR CALLING: ebx, ecx, esi
				; OFTEN CLOBBERED: eax, edi, edx (ReadInt, and WriteString, div op)
				; Functions that take x and y as arguments:
				    ; Make sure to push x and y to the stack before calling them
				    ; x = ebx, y = ecx
				    ; Make sure to pop x and y back out

				; Configurable constants
				    ; MAP_WIDTH and height of the map
 = 00000010			    MAP_WIDTH = 16
 = 00000010			    MAP_HEIGHT = 16
 = 00000001			    PERCENT_MINES = 1

				; Internal constants
				    ; Field map codes
 = 00000000			    FIELD_CLEAR = 0
 = 00000009			    FIELD_MINE = 9

				    ; Interactive map codes
 = 00000000			    INTER_UNDISCOVERED = 0
 = 00000001			    INTER_DISCOVERED = 1
 = 00000002			    INTER_FLAGGED = 2

				    ; Display characters
 = 0000002D			    UNDISCOVERED_CHAR = '-'
 = 00000046			    FLAG_CHAR = 'F'
 = 00000020			    CLEAR_CHAR = ' '
 = 0000002A			    MINE_CHAR = '*'

				    ; Kernel lengths
 = 00000008			    FULL_AREA_KERNEL_LEN = 8
 = 00000004			    ADJACENT_KERNEL_LEN = 4
 00000000			.data
				; Internal variables
 00000000 0000000F		    rng dd 15
 00000004 FFFFFFFF		    full_area_kernel_x dd -1, 0, 1, -1, 1, -1, 0, 1
	   00000000
	   00000001
	   FFFFFFFF
	   00000001
	   FFFFFFFF
	   00000000
	   00000001
 00000024 FFFFFFFF		    full_area_kernel_y dd -1, -1, -1, 0, 0, 1, 1, 1
	   FFFFFFFF
	   FFFFFFFF
	   00000000
	   00000000
	   00000001
	   00000001
	   00000001
 00000044 FFFFFFFF		    adjacent_kernel_x dd -1, 0, 0, 1
	   00000000
	   00000000
	   00000001
 00000054 00000000		    adjacent_kernel_y dd 0, -1, 1, 0
	   FFFFFFFF
	   00000001
	   00000000
 00000064  00000100 [		    field BYTE (MAP_WIDTH * MAP_HEIGHT) DUP(0)
	    00
	   ]
 00000164  00000100 [		    interactive BYTE (MAP_WIDTH * MAP_HEIGHT) DUP(0)
	    00
	   ]

				; string variables
 00000264 57 68 61 74 20	    prompt_command          BYTE "What operation would you like to execute?", 0
	   6F 70 65 72 61
	   74 69 6F 6E 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 65 78
	   65 63 75 74 65
	   3F 00
 0000028E 30 20 3D 20 63	    prompt_command_options  BYTE "0 = clear, 1 = toggle flag", 0
	   6C 65 61 72 2C
	   20 31 20 3D 20
	   74 6F 67 67 6C
	   65 20 66 6C 61
	   67 00
 000002A9 45 6E 74 65 72	    ask_x                   BYTE "Enter X coordinate: ", 0
	   20 58 20 63 6F
	   6F 72 64 69 6E
	   61 74 65 3A 20
	   00
 000002BE 45 6E 74 65 72	    ask_y                   BYTE "Enter Y coordinate: ", 0
	   20 59 20 63 6F
	   6F 72 64 69 6E
	   61 74 65 3A 20
	   00
 000002D3 59 6F 75 20 6C	    you_died                BYTE "You lost nerd", 0
	   6F 73 74 20 6E
	   65 72 64 00
 000002E1 59 6F 75 20 77	    you_won                 BYTE "You won who cares", 0
	   6F 6E 20 77 68
	   6F 20 63 61 72
	   65 73 00
 000002F3 45 6E 74 65 72	    out_of_bounds           BYTE "Entered numbers were not in bounds", 0
	   65 64 20 6E 75
	   6D 62 65 72 73
	   20 77 65 72 65
	   20 6E 6F 74 20
	   69 6E 20 62 6F
	   75 6E 64 73 00

				; integer variables
 00000316 00000000		    flagged_mines           DWORD 0
 0000031A 00000000		    num_mines               DWORD 0


 00000000			.code
 00000000			main PROC

 00000000  E8 00000182		call generate_map
 00000005			game_loop:
 00000005  E8 0000023E		    call print_map
 0000000A			    prompt_command_loop:
 0000000A  BA 00000264 R	        mov edx, OFFSET prompt_command
 0000000F  E8 00000000 E	        call WriteString
 00000014  E8 00000000 E	        call CrLf
 00000019  BA 0000028E R	        mov edx, OFFSET prompt_command_options
 0000001E  E8 00000000 E	        call WriteString
 00000023  E8 00000000 E	        call CrLf
 00000028  E8 00000000 E	        call ReadInt
 0000002D  83 F8 01		        cmp eax, 1
 00000030  7F D8		        jg prompt_command_loop
 00000032  83 F8 00		        cmp eax, 0
 00000035  7C D3		        jl prompt_command_loop

 00000037  8B F0		    mov esi, eax
				 

 00000039			      get_x_and_y:
 00000039  BA 000002A9 R	        mov edx, OFFSET ask_x
 0000003E  E8 00000000 E	        call WriteString
 00000043  E8 00000000 E	        call CrLf
 00000048  E8 00000000 E	        call ReadHex
 0000004D  8B D8		        mov ebx, eax
 0000004F  BA 000002BE R	        mov edx, OFFSET ask_y
 00000054  E8 00000000 E	        call WriteString
 00000059  E8 00000000 E	        call CrLf
 0000005E  E8 00000000 E	        call ReadHex
 00000063  8B C8		        mov ecx, eax
 00000065  E8 000000A7		        call bounds_check
 0000006A  7D 11		        jge valid_x_and_y
				        ; Print error
 0000006C  BA 000002F3 R	        mov edx, OFFSET out_of_bounds
 00000071  E8 00000000 E	        call WriteString
 00000076  E8 00000000 E	        call CrLf
 0000007B  EB BC		        jmp get_x_and_y

 0000007D			   valid_x_and_y:
				        
				   
 0000007D  BF 00000010		    mov edi, MAP_WIDTH
 00000082  0F AF F9		    imul edi, ecx
 00000085  03 FB		    add edi, ebx

 00000087  83 FE 00		    cmp esi, 0
 0000008A  74 39		    je clear_map
				        ; Toogle flag for this area
 0000008C  80 BF 00000164 R	        cmp [interactive + edi], INTER_FLAGGED
	   02
 00000093  74 18		        je is_flagged
 00000095  C6 87 00000164 R	            mov [interactive + edi], INTER_FLAGGED          ; change the space to the code for a flag
	   02
 0000009C  80 BF 00000064 R	            cmp [field + edi], FIELD_MINE                   ; check if they flagged a mine
	   09
 000000A3  75 4B		            jne continue_game_loop
 000000A5  FF 05 00000316 R	                inc [flagged_mines]
 000000AB  EB 43		            jmp continue_game_loop
 000000AD			        is_flagged:
 000000AD  C6 87 00000164 R	            mov [interactive + edi], INTER_UNDISCOVERED
	   00
 000000B4  80 BF 00000064 R	            cmp [field + edi], FIELD_MINE
	   09
 000000BB  75 33		            jne continue_game_loop
 000000BD  FF 0D 00000316 R	                dec [flagged_mines]
 000000C3  EB 2B		            jmp continue_game_loop

 000000C5			    clear_map:
				        ; Clear this area
 000000C5  80 BF 00000064 R	        cmp [field + edi], FIELD_MINE
	   09
 000000CC  74 0E		        je dead
				        ; Check if there's not a flag here
 000000CE  C6 87 00000164 R	        mov [interactive + edi], INTER_DISCOVERED
	   01
 000000D5  E8 00000103		        call seed_and_grow_clear
 000000DA  EB 14		        jmp continue_game_loop
 000000DC			        dead:
 000000DC  BA 000002D3 R	            mov edx, OFFSET you_died
 000000E1  E8 00000000 E	            call WriteString
 000000E6  E8 00000000 E	            call CrLf
 000000EB  E9 00000229		            jmp exit_label
				        

 000000F0			   continue_game_loop: 
 000000F0  8B 3D 00000316 R	    mov edi, [flagged_mines]
 000000F6  3B 3D 0000031A R	    cmp edi, [num_mines]
 000000FC  0F 8C FFFFFF03	    jl game_loop

 00000102  BA 000002E1 R	    mov edx, OFFSET you_won
 00000107  E8 00000000 E	    call WriteString
 0000010C  E8 00000000 E	    call CrLf



				; x = ebx, y = ecx
				; Set EFLAGS so that jl jumps any of the following are unsatisfied
				;   x >= 0 && y >= 0 && MAP_WIDTH - 1 >= x && MAP_HEIGHT - 1 >= y;
				; Clobbers: eax
 00000111			bounds_check:
 00000111  83 FB 00		    cmp ebx, 0
 00000114  7C 15		    jl bounds_check_break  
 00000116  83 F9 00		    cmp ecx, 0
 00000119  7C 10		    jl bounds_check_break  
 0000011B  B8 0000000F		    mov eax, MAP_WIDTH - 1
 00000120  3B C3		    cmp eax, ebx
 00000122  7C 07		    jl bounds_check_break  
 00000124  B8 0000000F		    mov eax, MAP_HEIGHT - 1
 00000129  3B C1		    cmp eax, ecx
 0000012B			    bounds_check_break:
 0000012B  C3			    ret

				; Clobbers: eax, edi
 0000012C			place_mine_at_xy:
 0000012C  FF 05 0000031A R	    inc [num_mines]
				    ; eax = (ecx * MAP_WIDTH) + ebx
 00000132  B8 00000010		    mov eax, MAP_WIDTH
 00000137  F7 E1		    mul ecx
 00000139  03 C3		    add eax, ebx

				    ; field[eax] = FIELD_MINE
 0000013B  B2 09		    mov dl, FIELD_MINE
 0000013D  88 90 00000064 R	    mov [field + eax], dl

 00000143  BF 00000000		    mov edi, 0 ; Loop counter for full_area_kernel_{x, y}
 00000148			    pm_area_loop:
				        ; We're about to clobber these two, save 'em
 00000148  53			        push ebx
 00000149  51			        push ecx

				        ; ebx += full_area_kernel_x[edi]
 0000014A  03 1C BD		        add ebx, [full_area_kernel_x + edi*4]
	   00000004 R

				        ; ecx += full_area_kernel_y[edi]
 00000151  03 0C BD		        add ecx, [full_area_kernel_y + edi*4]
	   00000024 R

				        ; if (!bounds_check(ebx, ecx)) continue 
 00000158  E8 FFFFFFB4		        call bounds_check
 0000015D  7C 1D		        jl pm_area_loop_continue

				        ; eax = ecx * MAP_WIDTH + ebx
 0000015F  B8 00000010		        mov eax, MAP_WIDTH
 00000164  F7 E1		        mul ecx
 00000166  03 C3		        add eax, ebx

				        ; dl = field[eax]
 00000168  8A 90 00000064 R	        mov dl, [field + eax]

				        ; if (dl == FIELD_MINE) continue
 0000016E  80 FA 09		        cmp dl, FIELD_MINE
 00000171  74 09		        je pm_area_loop_continue

				        ; dl += 1
 00000173  80 C2 01		        add dl, 1

				        ; field[eax] = dl
 00000176  88 90 00000064 R	        mov [field + eax], dl

 0000017C			        pm_area_loop_continue:
 0000017C  59			        pop ecx
 0000017D  5B			        pop ebx

 0000017E  83 C7 01		     add edi, 1
 00000181  83 FF 08		     cmp edi, FULL_AREA_KERNEL_LEN
 00000184  7C C2		     jl pm_area_loop

 00000186  C3			    ret


				; Generates a new map
 00000187			generate_map:
 00000187  C7 05 0000031A R	    mov [num_mines], 0
	   00000000
				    ;call Randomize
				    ; Clear both of the arrays 
 00000191  B9 00000100		    mov ecx, MAP_WIDTH * MAP_HEIGHT
 00000196			    gm_clear_loop:
 00000196  C6 81 00000064 R	        mov [field + ecx], FIELD_CLEAR
	   00
 0000019D  C6 81 00000164 R	        mov [interactive + ecx], INTER_UNDISCOVERED
	   00
 000001A4  E2 F0		        loop gm_clear_loop
				    
				    
				    ; Loop through all coordinates, populating it with mines
 000001A6  B9 00000000		    mov ecx, 0 ; Y coord
 000001AB			    gm_y_loop:

 000001AB  BB 00000000		        mov ebx, 0 ; X coord
 000001B0			        gm_x_loop:
 000001B0  B8 00000064		            mov eax, 100
 000001B5  E8 00000000 E	            call RandomRange

				            ; if (edx >= PERCENT_MINES) jmp gm_clear
 000001BA  BE 00000001		            mov esi, PERCENT_MINES
 000001BF  3B C6		            cmp eax, esi
 000001C1  7D 09		            jge gm_clear

				            ; else, place a mine at (ebx, ecx)
				            ; TODO: Comment out these push/pop, they're not needed!
 000001C3  53			            push ebx
 000001C4  51			            push ecx
 000001C5  E8 FFFFFF62		            call place_mine_at_xy
 000001CA  59			            pop ecx
 000001CB  5B			            pop ebx
				            
 000001CC			            gm_clear:

				        ; if (++x > MAP_WIDTH) break;
 000001CC  83 C3 01		        add ebx, 1
 000001CF  83 FB 10		        cmp ebx, MAP_WIDTH
 000001D2  7C DC		        jl gm_x_loop

				    ; if (++y > MAP_HEIGHT) break;
 000001D4  83 C1 01		    add ecx, 1
 000001D7  83 F9 10		    cmp ecx, MAP_HEIGHT
 000001DA  7C CF		    jl gm_y_loop
 000001DC  C3			    ret

 000001DD			seed_and_grow_clear:
				    ; Save last position into the stack
 000001DD  BF 00000000		    mov edi, 0
 000001E2			    seed_and_grow_adj_loop:
 000001E2  53			        push ebx
 000001E3  51			        push ecx
 000001E4  57			        push edi

				        ; x, y += kernel[i]
 000001E5  03 1C BD		        add ebx, [adjacent_kernel_x + edi*4]
	   00000044 R
 000001EC  03 0C BD		        add ecx, [adjacent_kernel_y + edi*4]
	   00000054 R

				        ; Bounds check
 000001F3  E8 FFFFFF19		        call bounds_check
 000001F8  7C 2E		        jl seed_and_grow_continue

				        ; position (eax) = y * WIDTH + x
 000001FA  B8 00000010		        mov eax, MAP_WIDTH
 000001FF  F7 E1		        mul ecx
 00000201  03 C3		        add eax, ebx

				        ; If the area is not undiscovered (is discovered/flagged), don't discover it
 00000203  80 B8 00000164 R	        cmp [interactive + eax], INTER_UNDISCOVERED
	   00
 0000020A  75 1C		        jne seed_and_grow_continue

				        ; If the area is a mine, continue loop
 0000020C  8A 90 00000064 R	        mov dl, [field + eax]
 00000212  80 FA 09		        cmp dl, FIELD_MINE
 00000215  74 11		        je seed_and_grow_continue

				        ; "Discover" current location
 00000217  C6 80 00000164 R	        mov [interactive + eax], INTER_DISCOVERED
	   01

				        ; If the area is not clear, don't seed-and-grow here
 0000021E  80 FA 00		        cmp dl, FIELD_CLEAR
 00000221  75 05		        jne seed_and_grow_continue

 00000223  E8 FFFFFFB5		        call seed_and_grow_clear
				        
 00000228			        seed_and_grow_continue:

 00000228  5F			        pop edi
 00000229  59			        pop ecx
 0000022A  5B			        pop ebx

 0000022B  83 C7 01		    add edi, 1
 0000022E  83 FF 04		    cmp edi, ADJACENT_KERNEL_LEN
 00000231  7C AF		    jl seed_and_grow_adj_loop

 00000233  C3			    ret

 00000234			write_short_hex:
 00000234  83 F8 0A		    cmp eax, 10
 00000237  7C 09		    jl write_short_hex_int

 00000239  83 C0 37		    add eax, 'A' - 10
 0000023C  E8 00000000 E	    call WriteChar
 00000241  C3			    ret

 00000242			    write_short_hex_int:
 00000242  E8 00000000 E	    call WriteDec
 00000247  C3			    ret

				; Prints the current map
 00000248			print_map:
 00000248  B9 00000000		    mov ecx, 0
 0000024D  B8 0000002D		    mov eax, '-'
 00000252  E8 00000000 E	    call WriteChar
 00000257  B8 00000020		    mov eax, ' '
 0000025C  E8 00000000 E	    call WriteChar
 00000261  E8 00000000 E	    call WriteChar
 00000266			    write_x_coords:
 00000266  8B C1		        mov eax, ecx
 00000268  E8 FFFFFFC7		        call write_short_hex
 0000026D  B8 00000020		        mov eax, ' '
 00000272  E8 00000000 E	        call WriteChar
 00000277  41			        inc ecx
 00000278  83 F9 10		        cmp ecx, MAP_WIDTH
 0000027B  7C E9		        jl write_x_coords
 0000027D  E8 00000000 E	    call CrLf
 00000282  E8 00000000 E	    call CrLf

 00000287  B9 00000000		    mov ecx, 0 ; Y coord
 0000028C			    print_y_loop:
				        ; write numbers along the side
 0000028C  8B C1		        mov eax, ecx
 0000028E  E8 FFFFFFA1		        call write_short_hex
 00000293  B8 00000020		        mov eax, ' '
 00000298  E8 00000000 E	        call WriteChar
 0000029D  E8 00000000 E	        call WriteChar

 000002A2  BB 00000000		        mov ebx, 0 ; X coord
 000002A7			        print_x_loop:
				            ; eax = (ecx * MAP_WIDTH) + ebx
 000002A7  BF 00000010		            mov edi, MAP_WIDTH
 000002AC  0F AF F9		            imul edi, ecx
 000002AF  03 FB		            add edi, ebx

				            ; check interactive map for 0 or 2
 000002B1  8A 87 00000164 R	            mov al, [interactive + edi]
 000002B7  3C 00		            cmp al, INTER_UNDISCOVERED
 000002B9  74 20		            je print_dash
 000002BB  3C 02		            cmp al, INTER_FLAGGED
 000002BD  74 23		            je F_in_the_chat

				            ; case where its not 0 or 2
 000002BF  8A 87 00000064 R	            mov al, [field + edi]
 000002C5  3C 09		            cmp al, FIELD_MINE
 000002C7  74 20		            je print_asterisk
 000002C9  3C 00		            cmp al, FIELD_CLEAR
 000002CB  74 07		            je print_space
 000002CD  04 30		            add al, '0'
 000002CF  E8 0000001C		            call im_done

 000002D4			            print_space:
 000002D4  B8 00000020		            mov eax, CLEAR_CHAR
 000002D9  EB 15		            jmp im_done

 000002DB			            print_dash:
 000002DB  B8 0000002D		            mov eax, UNDISCOVERED_CHAR
 000002E0  EB 0E		            jmp im_done

 000002E2			            F_in_the_chat:
 000002E2  B8 00000046		            mov eax, FLAG_CHAR
 000002E7  EB 07		            jmp im_done

 000002E9			            print_asterisk:
 000002E9  B8 0000002A		            mov eax, MINE_CHAR
 000002EE  EB 00		            jmp im_done

 000002F0			            im_done:
 000002F0  E8 00000000 E	            call WriteChar
 000002F5  B8 00000020		            mov eax, ' '
 000002FA  E8 00000000 E	            call WriteChar


				        ; if (++x > MAP_WIDTH) break;
 000002FF  83 C3 01		        add ebx, 1
 00000302  83 FB 10		        cmp ebx, MAP_WIDTH
 00000305  7C A0		        jl print_x_loop

				    ; Write a newline
 00000307  E8 00000000 E	    call Crlf

				    ; if (++y > MAP_HEIGHT) break;
 0000030C  83 C1 01		    add ecx, 1
 0000030F  83 F9 10		    cmp ecx, MAP_HEIGHT
 00000312  0F 8C FFFFFF74	    jl print_y_loop

 00000318  C3			    ret

				  

 00000319			exit_label:
				    exit
 00000319  6A 00	   *	    push   +000000000h
 0000031B  E8 00000000 E   *	    call   ExitProcess

 00000320			main ENDP

				END main


Microsoft (R) Macro Assembler Version 14.24.28316.0	    03/08/20 16:02:23
WeeklyAssign4.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000031E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000320 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000320 Public STDCALL
  game_loop  . . . . . . . . . .	L Near	 00000005 _TEXT	
  prompt_command_loop  . . . . .	L Near	 0000000A _TEXT	
  get_x_and_y  . . . . . . . . .	L Near	 00000039 _TEXT	
  valid_x_and_y  . . . . . . . .	L Near	 0000007D _TEXT	
  is_flagged . . . . . . . . . .	L Near	 000000AD _TEXT	
  clear_map  . . . . . . . . . .	L Near	 000000C5 _TEXT	
  dead . . . . . . . . . . . . .	L Near	 000000DC _TEXT	
  continue_game_loop . . . . . .	L Near	 000000F0 _TEXT	
  bounds_check . . . . . . . . .	L Near	 00000111 _TEXT	
  bounds_check_break . . . . . .	L Near	 0000012B _TEXT	
  place_mine_at_xy . . . . . . .	L Near	 0000012C _TEXT	
  pm_area_loop . . . . . . . . .	L Near	 00000148 _TEXT	
  pm_area_loop_continue  . . . .	L Near	 0000017C _TEXT	
  generate_map . . . . . . . . .	L Near	 00000187 _TEXT	
  gm_clear_loop  . . . . . . . .	L Near	 00000196 _TEXT	
  gm_y_loop  . . . . . . . . . .	L Near	 000001AB _TEXT	
  gm_x_loop  . . . . . . . . . .	L Near	 000001B0 _TEXT	
  gm_clear . . . . . . . . . . .	L Near	 000001CC _TEXT	
  seed_and_grow_clear  . . . . .	L Near	 000001DD _TEXT	
  seed_and_grow_adj_loop . . . .	L Near	 000001E2 _TEXT	
  seed_and_grow_continue . . . .	L Near	 00000228 _TEXT	
  write_short_hex  . . . . . . .	L Near	 00000234 _TEXT	
  write_short_hex_int  . . . . .	L Near	 00000242 _TEXT	
  print_map  . . . . . . . . . .	L Near	 00000248 _TEXT	
  write_x_coords . . . . . . . .	L Near	 00000266 _TEXT	
  print_y_loop . . . . . . . . .	L Near	 0000028C _TEXT	
  print_x_loop . . . . . . . . .	L Near	 000002A7 _TEXT	
  print_space  . . . . . . . . .	L Near	 000002D4 _TEXT	
  print_dash . . . . . . . . . .	L Near	 000002DB _TEXT	
  F_in_the_chat  . . . . . . . .	L Near	 000002E2 _TEXT	
  print_asterisk . . . . . . . .	L Near	 000002E9 _TEXT	
  im_done  . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  exit_label . . . . . . . . . .	L Near	 00000319 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ADJACENT_KERNEL_LEN  . . . . . .	Number	 00000004h   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CLEAR_CHAR . . . . . . . . . . .	Number	 00000020h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FIELD_CLEAR  . . . . . . . . . .	Number	 00000000h   
FIELD_MINE . . . . . . . . . . .	Number	 00000009h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FLAG_CHAR  . . . . . . . . . . .	Number	 00000046h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FULL_AREA_KERNEL_LEN . . . . . .	Number	 00000008h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INTER_DISCOVERED . . . . . . . .	Number	 00000001h   
INTER_FLAGGED  . . . . . . . . .	Number	 00000002h   
INTER_UNDISCOVERED . . . . . . .	Number	 00000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAP_HEIGHT . . . . . . . . . . .	Number	 00000010h   
MAP_WIDTH  . . . . . . . . . . .	Number	 00000010h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINE_CHAR  . . . . . . . . . . .	Number	 0000002Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PERCENT_MINES  . . . . . . . . .	Number	 00000001h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UNDISCOVERED_CHAR  . . . . . . .	Number	 0000002Dh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
adjacent_kernel_x  . . . . . . .	DWord	 00000044 _DATA	
adjacent_kernel_y  . . . . . . .	DWord	 00000054 _DATA	
ask_x  . . . . . . . . . . . . .	Byte	 000002A9 _DATA	
ask_y  . . . . . . . . . . . . .	Byte	 000002BE _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
field  . . . . . . . . . . . . .	Byte	 00000064 _DATA	
flagged_mines  . . . . . . . . .	DWord	 00000316 _DATA	
full_area_kernel_x . . . . . . .	DWord	 00000004 _DATA	
full_area_kernel_y . . . . . . .	DWord	 00000024 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
interactive  . . . . . . . . . .	Byte	 00000164 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_mines  . . . . . . . . . . .	DWord	 0000031A _DATA	
out_of_bounds  . . . . . . . . .	Byte	 000002F3 _DATA	
prompt_command_options . . . . .	Byte	 0000028E _DATA	
prompt_command . . . . . . . . .	Byte	 00000264 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rng  . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
you_died . . . . . . . . . . . .	Byte	 000002D3 _DATA	
you_won  . . . . . . . . . . . .	Byte	 000002E1 _DATA	

	   0 Warnings
	   0 Errors
